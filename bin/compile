#!/bin/bash

##
# usage: bin/compile <build-dir> <cache-dir>

set -e
bpdir=$(cd $(dirname $(dirname $0)); pwd)
mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
export build
test -z ${build} && exit
cache=$(cd "$2/" && pwd)
test -z ${cache} && exit
DEFAULT_OTP_VERSION="master"
if [ -f ${build}/.preferred_otp_version ]; then
    OTP_VERSION=$(cat ${build}/.preferred_otp_version)
fi
ver=${OTP_VERSION:=${DEFAULT_OTP_VERSION}}
tarball=${ver}.tgz
OTP_TARBALL_URL="https://s3.amazonaws.com/heroku-buildpack-erlang/${tarball}"
build_tmp=/tmp/app_build
ERLROOT=${build_tmp}/otp
PROFILE=${HOME}/.profile.d

export_env_dir() {
    env_dir=$1
    whitelist_regex=${2:-''}
    blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
    if [ -d "$env_dir" ]; then
        for e in $(ls $env_dir); do
            echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
                export "$e=$(cat $env_dir/$e)"
            :
        done
    fi
}

export_env_dir $3

echo "-----> Using Erlang/OTP $ver"

(
    set -e

    # Already cached?
    test -f ${cache}/${tarball} && exit

    rm -rf ${cache}/* # be sure not to build up cruft
    cd ${cache}
    echo "-------> Fetching Erlang/OTP $ver"
    curl -sO ${OTP_TARBALL_URL} || exit 1
)

mv $build $build_tmp
echo "-------> Unpacking Erlang/OTP $ver"
mkdir -p ${ERLROOT}
tar zxf ${cache}/${tarball} -C ${ERLROOT} --strip-components=2
echo "-------> Installing Erlang/OTP $ver"
ln -s ${ERLROOT} /app/otp
${ERLROOT}/Install -minimal /app/otp

PATH=$cache/.tools/wget/bin:/app/otp/bin$PATH
export PATH
CPATH=$USER_CPATH
export CPATH
cd $build_tmp

unset GIT_DIR
if [ -f erlang.mk ]; then
    echo "-----> Building with Make using erlang.mk"
    make 2>&1 | sed -u 's/^/       /'
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo "-----> Build failed"
        exit 1
    fi
else
    if [ ! -e "rebar" ]; then
        echo "-----> Installing Rebar from buildpack"
        cp ${bpdir}/opt/rebar ./
    fi
    echo "-----> Building with Rebar"
    ./rebar ${REBAR_OPTS} get-deps compile 2>&1 | sed -u 's/^/       /'
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo "-----> Build failed"
        exit 1
    fi
fi

if [ -f relx.config ]; then
    if [ ! -e "relx" ]; then
        echo "-----> Installing relx"
        wget https://github.com/erlware/relx/releases/download/v0.6.0/relx
        chmod +x relx
    fi
    echo "-----> Building release with relx"
    ./relx 2>&1 | sed -u 's/^/       /'
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo "-----> Build failed"
        exit 1
    fi
fi

if [ -f ${bpdir}/opt/otp.sh ]; then
  mkdir -p ${PROFILE}
  cp ${bpdir}/opt/otp.sh ${PROFILE}
fi

cd /tmp
rm -rf $ERLROOT
mv $build_tmp $build

echo "-----> Build succeeded"
